import java.util.Arrays;

public class PalindromicPartitioning {
    
    private static boolean[][] palindromeDP(String a, int n) {
        boolean[][] dp = new boolean[n][n];
        
        for (int i=0; i<n; i++) {
            int row = 0, col = i;
            while (col != n) {
                dp[row][col] = (row+1 == n || isPalindrome(dp, row+1, col-1)) && a.charAt(row) == a.charAt(col);
                row++;
                col++;
            }
        }
        return dp;
    }
    
    private static boolean isPalindrome(boolean dp[][], int i, int j) {
        if (i>=j || j == i+1) return true;
        return dp[i][j];
    }
    
	public static void main(String[] args) {
		String a = "malyaylamnitin";
		run(a, a.length());
		a = "asdjhcvgsutfbuiosdyeee";
		run(a, a.length());
	}
	
	private static void run(String a, int n) {
		boolean palindromeDP[][] = palindromeDP(a, n);
		
// 		for (boolean row[]: palindromeDP)
// 		    System.out.println(Arrays.toString(row));
		    
		int dpMemo[][] = new int[n][n], dpTabulation[][] = new int[n][n];
		
		for (int row[]: dpMemo)
		    Arrays.fill(row, -1);
		    
		int ansUsingMemoization = minPartitionsMemoization(palindromeDP, dpMemo, n, 0, n-1);
		int ansUsingTabulation = minPartitionsTabulation(palindromeDP, dpTabulation, n);
		System.out.println("ansUsingMemoization :"+ansUsingMemoization);
		System.out.println("ansUsingTabulation :"+ansUsingTabulation);
	}
	
	private static int minPartitionsMemoization(boolean pDP[][], int dp[][], int n, int i, int j) {
	    if (i == j) return 0;
	    if (dp[i][j] != -1) return dp[i][j];
	    if (pDP[i][j]) return 0;
	    dp[i][j] = Integer.MAX_VALUE;
	    for (int k=i; k<j; k++) {
	        int left = minPartitionsMemoization(pDP, dp, n, i, k);
	        int right = minPartitionsMemoization(pDP, dp, n, k+1, j);
	        dp[i][j] = Math.min(dp[i][j], left + right + 1);
	    }
	    return dp[i][j];
	}
	
	
	private static int minPartitionsTabulation(boolean pDP[][], int dp[][], int n) {
	    for (int i=0; i<n; i++)
	        dp[i][i] = 0;
	    
	    for (int i=0; i<n-1; i++)
	        dp[i][i+1] = pDP[i][i+1] ? 0 : 1;
	        
	   
        for (int i=2; i<n; i++) {
            int row = 0, col = i;
            while (col != n) {
                dp[row][col] = Integer.MAX_VALUE;
                if (pDP[row][col]) dp[row][col] = 0;
                else {
                    for (int k = row+1; k<col; k++)
                        dp[row][col] = Math.min(dp[row][col], dp[row][k] + dp[k+1][col] + 1);
                }
                row++;
                col++;
            }
        }
	    return dp[0][n-1];
	}
	
}
